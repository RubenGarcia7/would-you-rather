{"ast":null,"code":"import { generateId } from '../utils/helpers';\nimport axios from 'axios';\n\nfunction formatPoll({\n  firstQuestion,\n  secondQuestion,\n  author\n}) {\n  return {\n    author,\n    id: generateId(),\n    firstQuestion,\n    secondQuestion,\n    isAnswered: false,\n    firstQuestionReplies: 0,\n    secondQuestionReplies: 0,\n    totalReplies: 0\n  };\n}\n\nexport function _savePoll({\n  firstQuestion,\n  secondQuestion,\n  author\n}) {\n  return new Promise((res, rej) => {\n    const formattedPoll = formatPoll({\n      author,\n      firstQuestion,\n      secondQuestion\n    });\n    setTimeout(() => {\n      // polls = {\n      //   ...polls,\n      //   [formattedPoll.id]: formattedPoll,\n      // }\n      // users = {\n      //   ...users,\n      //   [author]: {\n      //     ...users[author],\n      //     polls: users[author].polls.concat([formattedPoll.id])\n      //   }\n      // }\n      res(formattedPoll);\n    }, 1000);\n  });\n} // const headers = {\n//   'Accept': 'application/json'\n// }\n\nexport const _getUsers = async () => {\n  try {\n    const res = await axios.get('http://localhost:5000/api/users');\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  } // return new Promise((res, rej) => {\n  //   setTimeout(() => res({...users}), 1000)\n  // })\n\n};\nexport const _getPolls = async () => {\n  try {\n    const res = await axios.get('http://localhost:5000/api/polls');\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  } // return new Promise((res, rej) => {\n  //   setTimeout(() => res({...polls}), 1000)\n  // })\n\n};","map":{"version":3,"sources":["C:/Users/Lenovo User/Desktop/Web Development Projects/2. React Developer Nanodegree/would-you-rather/frontend/src/utils/_DATA.js"],"names":["generateId","axios","formatPoll","firstQuestion","secondQuestion","author","id","isAnswered","firstQuestionReplies","secondQuestionReplies","totalReplies","_savePoll","Promise","res","rej","formattedPoll","setTimeout","_getUsers","get","data","err","console","log","_getPolls"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAKA,SAASC,UAAT,CAAqB;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,cAAjB;AAAiCC,EAAAA;AAAjC,CAArB,EAAgE;AAC9D,SAAO;AACLA,IAAAA,MADK;AAELC,IAAAA,EAAE,EAAEN,UAAU,EAFT;AAGLG,IAAAA,aAHK;AAILC,IAAAA,cAJK;AAKLG,IAAAA,UAAU,EAAE,KALP;AAMLC,IAAAA,oBAAoB,EAAE,CANjB;AAOLC,IAAAA,qBAAqB,EAAE,CAPlB;AAQLC,IAAAA,YAAY,EAAE;AART,GAAP;AAUD;;AAED,OAAO,SAASC,SAAT,CAAoB;AAAER,EAAAA,aAAF;AAAiBC,EAAAA,cAAjB;AAAiCC,EAAAA;AAAjC,CAApB,EAA+D;AACpE,SAAO,IAAIO,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,UAAMC,aAAa,GAAGb,UAAU,CAAC;AAC/BG,MAAAA,MAD+B;AAE/BF,MAAAA,aAF+B;AAG/BC,MAAAA;AAH+B,KAAD,CAAhC;AAMAY,IAAAA,UAAU,CAAC,MAAM;AACf;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAH,MAAAA,GAAG,CAACE,aAAD,CAAH;AACD,KAfS,EAeP,IAfO,CAAV;AAgBD,GAvBM,CAAP;AAwBD,C,CAED;AACA;AACA;;AAEA,OAAO,MAAME,SAAS,GAAG,YAAY;AACnC,MAAI;AACF,UAAMJ,GAAG,GAAG,MAAMZ,KAAK,CAACiB,GAAN,CAAU,iCAAV,CAAlB;AACA,WAAOL,GAAG,CAACM,IAAX;AACD,GAHD,CAIA,OAAMC,GAAN,EAAW;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAPkC,CASnC;AACA;AACA;;AACD,CAZM;AAcP,OAAO,MAAMG,SAAS,GAAG,YAAY;AACnC,MAAI;AACF,UAAMV,GAAG,GAAG,MAAMZ,KAAK,CAACiB,GAAN,CAAU,iCAAV,CAAlB;AACA,WAAOL,GAAG,CAACM,IAAX;AACD,GAHD,CAIA,OAAMC,GAAN,EAAW;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAPkC,CASnC;AACA;AACA;;AACD,CAZM","sourcesContent":["import { generateId } from '../utils/helpers'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\nfunction formatPoll ({ firstQuestion, secondQuestion, author }) {\r\n  return {\r\n    author,\r\n    id: generateId(),\r\n    firstQuestion,\r\n    secondQuestion,\r\n    isAnswered: false,\r\n    firstQuestionReplies: 0,\r\n    secondQuestionReplies: 0,\r\n    totalReplies: 0\r\n  }\r\n}\r\n\r\nexport function _savePoll ({ firstQuestion, secondQuestion, author }) {\r\n  return new Promise((res, rej) => {\r\n    const formattedPoll = formatPoll({\r\n      author,\r\n      firstQuestion,\r\n      secondQuestion\r\n    })\r\n\r\n    setTimeout(() => {\r\n      // polls = {\r\n      //   ...polls,\r\n      //   [formattedPoll.id]: formattedPoll,\r\n      // }\r\n\r\n      // users = {\r\n      //   ...users,\r\n      //   [author]: {\r\n      //     ...users[author],\r\n      //     polls: users[author].polls.concat([formattedPoll.id])\r\n      //   }\r\n      // }\r\n\r\n      res(formattedPoll)\r\n    }, 1000)\r\n  })\r\n}\r\n\r\n// const headers = {\r\n//   'Accept': 'application/json'\r\n// }\r\n\r\nexport const _getUsers = async () => {\r\n  try {\r\n    const res = await axios.get('http://localhost:5000/api/users')\r\n    return res.data\r\n  }\r\n  catch(err) {\r\n    console.log(err)\r\n  }\r\n  \r\n  // return new Promise((res, rej) => {\r\n  //   setTimeout(() => res({...users}), 1000)\r\n  // })\r\n}\r\n\r\nexport const _getPolls = async () => {\r\n  try {\r\n    const res = await axios.get('http://localhost:5000/api/polls')\r\n    return res.data\r\n  }\r\n  catch(err) {\r\n    console.log(err)\r\n  }\r\n\r\n  // return new Promise((res, rej) => {\r\n  //   setTimeout(() => res({...polls}), 1000)\r\n  // })\r\n}"]},"metadata":{},"sourceType":"module"}