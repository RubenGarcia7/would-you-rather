{"ast":null,"code":"import { generateId } from '../utils/helpers';\nimport axios from 'axios';\nexport let users = {\n  'Mike': {\n    id: 'Mike',\n    avatar: 'https://randomuser.me/api/portraits/men/49.jpg',\n    createdPolls: ['98c1e68-3320-4157-18w7-84c2d1e7zxf1v'],\n    answeredPolls: [],\n    points: 1\n  },\n  'Carol': {\n    id: 'Carol',\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\n    createdPolls: [],\n    answeredPolls: [],\n    points: 0\n  },\n  'Jennifer': {\n    id: 'Jennifer',\n    avatar: 'https://randomuser.me/api/portraits/women/3.jpg',\n    createdPolls: [],\n    answeredPolls: ['17w1v628-192q-1537-12x4-11a131j3tb6p'],\n    points: 1\n  },\n  'Victor': {\n    id: 'Victor',\n    avatar: 'https://randomuser.me/api/portraits/men/16.jpg',\n    createdPolls: [],\n    answeredPolls: [],\n    points: 0\n  }\n};\n\nfunction formatPoll({\n  firstQuestion,\n  secondQuestion,\n  author\n}) {\n  return {\n    author,\n    id: generateId(),\n    firstQuestion,\n    secondQuestion,\n    isAnswered: false,\n    firstQuestionReplies: 0,\n    secondQuestionReplies: 0,\n    totalReplies: 0\n  };\n}\n\nexport function _savePoll({\n  firstQuestion,\n  secondQuestion,\n  author\n}) {\n  return new Promise((res, rej) => {\n    const formattedPoll = formatPoll({\n      author,\n      firstQuestion,\n      secondQuestion\n    });\n    axios.post('http://localhost:5000/api/polls', formattedPoll).then(res => {\n      console.log(res);\n    });\n    res(formattedPoll); // setTimeout(() => {\n    // }, 1000)\n  });\n}\nexport const _getUsers = async () => {\n  try {\n    const res = await axios.get('http://localhost:5000/api/users');\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const _getPolls = async () => {\n  try {\n    const res = await axios.get('http://localhost:5000/api/polls');\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["C:/Users/Lenovo User/Desktop/Web Development Projects/2. React Developer Nanodegree/would-you-rather/frontend/src/utils/_DATA.js"],"names":["generateId","axios","users","id","avatar","createdPolls","answeredPolls","points","formatPoll","firstQuestion","secondQuestion","author","isAnswered","firstQuestionReplies","secondQuestionReplies","totalReplies","_savePoll","Promise","res","rej","formattedPoll","post","then","console","log","_getUsers","get","data","err","_getPolls"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAIC,KAAK,GAAG;AACjB,UAAQ;AACNC,IAAAA,EAAE,EAAE,MADE;AAENC,IAAAA,MAAM,EAAE,gDAFF;AAGNC,IAAAA,YAAY,EAAE,CAAC,sCAAD,CAHR;AAINC,IAAAA,aAAa,EAAE,EAJT;AAKNC,IAAAA,MAAM,EAAE;AALF,GADS;AAQjB,WAAS;AACPJ,IAAAA,EAAE,EAAE,OADG;AAEPC,IAAAA,MAAM,EAAE,iDAFD;AAGPC,IAAAA,YAAY,EAAE,EAHP;AAIPC,IAAAA,aAAa,EAAE,EAJR;AAKPC,IAAAA,MAAM,EAAE;AALD,GARQ;AAejB,cAAY;AACVJ,IAAAA,EAAE,EAAE,UADM;AAEVC,IAAAA,MAAM,EAAE,iDAFE;AAGVC,IAAAA,YAAY,EAAE,EAHJ;AAIVC,IAAAA,aAAa,EAAE,CAAC,sCAAD,CAJL;AAKVC,IAAAA,MAAM,EAAE;AALE,GAfK;AAsBjB,YAAU;AACRJ,IAAAA,EAAE,EAAE,QADI;AAERC,IAAAA,MAAM,EAAE,gDAFA;AAGRC,IAAAA,YAAY,EAAE,EAHN;AAIRC,IAAAA,aAAa,EAAE,EAJP;AAKRC,IAAAA,MAAM,EAAE;AALA;AAtBO,CAAZ;;AAgCP,SAASC,UAAT,CAAqB;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,cAAjB;AAAiCC,EAAAA;AAAjC,CAArB,EAAgE;AAC9D,SAAO;AACLA,IAAAA,MADK;AAELR,IAAAA,EAAE,EAAEH,UAAU,EAFT;AAGLS,IAAAA,aAHK;AAILC,IAAAA,cAJK;AAKLE,IAAAA,UAAU,EAAE,KALP;AAMLC,IAAAA,oBAAoB,EAAE,CANjB;AAOLC,IAAAA,qBAAqB,EAAE,CAPlB;AAQLC,IAAAA,YAAY,EAAE;AART,GAAP;AAUD;;AAED,OAAO,SAASC,SAAT,CAAoB;AAAEP,EAAAA,aAAF;AAAiBC,EAAAA,cAAjB;AAAiCC,EAAAA;AAAjC,CAApB,EAA+D;AACpE,SAAO,IAAIM,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,UAAMC,aAAa,GAAGZ,UAAU,CAAC;AAC/BG,MAAAA,MAD+B;AAE/BF,MAAAA,aAF+B;AAG/BC,MAAAA;AAH+B,KAAD,CAAhC;AAMAT,IAAAA,KAAK,CAACoB,IAAN,CAAW,iCAAX,EAA8CD,aAA9C,EACCE,IADD,CACOJ,GAAD,IAAS;AACbK,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACD,KAHD;AAKAA,IAAAA,GAAG,CAACE,aAAD,CAAH,CAZ+B,CAc/B;AAEA;AACD,GAjBM,CAAP;AAkBD;AAED,OAAO,MAAMK,SAAS,GAAG,YAAY;AACnC,MAAI;AACF,UAAMP,GAAG,GAAG,MAAMjB,KAAK,CAACyB,GAAN,CAAU,iCAAV,CAAlB;AACA,WAAOR,GAAG,CAACS,IAAX;AACD,GAHD,CAIA,OAAMC,GAAN,EAAW;AACTL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACD;AACF,CARM;AAUP,OAAO,MAAMC,SAAS,GAAG,YAAY;AACnC,MAAI;AACF,UAAMX,GAAG,GAAG,MAAMjB,KAAK,CAACyB,GAAN,CAAU,iCAAV,CAAlB;AACA,WAAOR,GAAG,CAACS,IAAX;AACD,GAHD,CAIA,OAAMC,GAAN,EAAW;AACTL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACD;AACF,CARM","sourcesContent":["import { generateId } from '../utils/helpers'\r\nimport axios from 'axios'\r\n\r\nexport let users = {\r\n  'Mike': {\r\n    id: 'Mike',\r\n    avatar: 'https://randomuser.me/api/portraits/men/49.jpg',\r\n    createdPolls: ['98c1e68-3320-4157-18w7-84c2d1e7zxf1v'],\r\n    answeredPolls: [],\r\n    points: 1\r\n  },\r\n  'Carol': {\r\n    id: 'Carol',\r\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\r\n    createdPolls: [],\r\n    answeredPolls: [],\r\n    points: 0\r\n  },\r\n  'Jennifer': {\r\n    id: 'Jennifer',\r\n    avatar: 'https://randomuser.me/api/portraits/women/3.jpg',\r\n    createdPolls: [],\r\n    answeredPolls: ['17w1v628-192q-1537-12x4-11a131j3tb6p'],\r\n    points: 1\r\n  },\r\n  'Victor': {\r\n    id: 'Victor',\r\n    avatar: 'https://randomuser.me/api/portraits/men/16.jpg',\r\n    createdPolls: [],\r\n    answeredPolls: [],\r\n    points: 0\r\n  }\r\n}\r\n\r\n\r\nfunction formatPoll ({ firstQuestion, secondQuestion, author }) {\r\n  return {\r\n    author,\r\n    id: generateId(),\r\n    firstQuestion,\r\n    secondQuestion,\r\n    isAnswered: false,\r\n    firstQuestionReplies: 0,\r\n    secondQuestionReplies: 0,\r\n    totalReplies: 0\r\n  }\r\n}\r\n\r\nexport function _savePoll ({ firstQuestion, secondQuestion, author }) {\r\n  return new Promise((res, rej) => {\r\n    const formattedPoll = formatPoll({\r\n      author,\r\n      firstQuestion,\r\n      secondQuestion\r\n    })\r\n\r\n    axios.post('http://localhost:5000/api/polls', formattedPoll)\r\n    .then((res) => {\r\n      console.log(res)\r\n    })\r\n        \r\n    res(formattedPoll)\r\n\r\n    // setTimeout(() => {\r\n     \r\n    // }, 1000)\r\n  })\r\n}\r\n\r\nexport const _getUsers = async () => {\r\n  try {\r\n    const res = await axios.get('http://localhost:5000/api/users')\r\n    return res.data\r\n  }\r\n  catch(err) {\r\n    console.log(err)\r\n  }\r\n}\r\n\r\nexport const _getPolls = async () => {\r\n  try {\r\n    const res = await axios.get('http://localhost:5000/api/polls')\r\n    return res.data\r\n  }\r\n  catch(err) {\r\n    console.log(err)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}