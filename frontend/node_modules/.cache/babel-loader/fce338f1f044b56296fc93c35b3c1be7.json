{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"C:/Users/Lenovo User/Desktop/Web Development Projects/2. React Developer Nanodegree/would-you-rather/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{connect}from'react-redux';import{Button}from'semantic-ui-react';import Poll from'./Poll';var HomePanel=function HomePanel(_ref){var unansweredPollIds=_ref.unansweredPollIds,answeredPollIds=_ref.answeredPollIds;var _useState=useState('unanswered'),_useState2=_slicedToArray(_useState,2),activeCategory=_useState2[0],setActiveCategory=_useState2[1];var handleClick=function handleClick(e){setActiveCategory(e.target.innerText.toLowerCase());};return/*#__PURE__*/_jsxs(\"div\",{className:\"home-panel main-container\",children:[/*#__PURE__*/_jsxs(Button.Group,{className:\"home-panel__btn-group\",children:[/*#__PURE__*/_jsx(Button,{onClick:handleClick,className:\"home-panel__btn-group__btn \".concat(activeCategory==='unanswered'?'positive':''),children:\"Unanswered\"}),/*#__PURE__*/_jsx(Button,{onClick:handleClick,className:\"home-panel__btn-group__btn \".concat(activeCategory==='answered'?'positive':''),children:\"Answered\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"home-panel__list\",children:// Render polls depending on whether they've been answered or not by the user and pass their ids\nactiveCategory==='unanswered'?unansweredPollIds.map(function(id){return/*#__PURE__*/_jsx(Poll,{id:id},id);}):answeredPollIds.map(function(id){return/*#__PURE__*/_jsx(Poll,{id:id},id);})})]});};function mapStateToProps(_ref2){var authedUser=_ref2.authedUser,polls=_ref2.polls;// Filter polls by answered and unanswered by the authed user\nvar answeredPolls=Object.fromEntries(Object.entries(polls).filter(function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],value=_ref4[1];return value.answeredBy.includes(authedUser.id);}));var unansweredPolls=Object.fromEntries(Object.entries(polls).filter(function(_ref5){var _ref6=_slicedToArray(_ref5,2),key=_ref6[0],value=_ref6[1];return!value.answeredBy.includes(authedUser.id);}));return{authedUser:authedUser,// Extract the ids of both types of polls to map over in the UI\nansweredPollIds:Object.keys(answeredPolls),unansweredPollIds:Object.keys(unansweredPolls)};}export default connect(mapStateToProps)(HomePanel);","map":{"version":3,"sources":["C:/Users/Lenovo User/Desktop/Web Development Projects/2. React Developer Nanodegree/would-you-rather/frontend/src/components/HomePanel.js"],"names":["React","useState","connect","Button","Poll","HomePanel","unansweredPollIds","answeredPollIds","activeCategory","setActiveCategory","handleClick","e","target","innerText","toLowerCase","map","id","mapStateToProps","authedUser","polls","answeredPolls","Object","fromEntries","entries","filter","key","value","answeredBy","includes","unansweredPolls","keys"],"mappings":"4TAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,MAAT,KAAuB,mBAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAA8C,IAA1CC,CAAAA,iBAA0C,MAA1CA,iBAA0C,CAAvBC,eAAuB,MAAvBA,eAAuB,eAClBN,QAAQ,CAAC,YAAD,CADU,wCACvDO,cADuD,eACvCC,iBADuC,eAG9D,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,CAAD,CAAO,CAE3BF,iBAAiB,CAACE,CAAC,CAACC,MAAF,CAASC,SAAT,CAAmBC,WAAnB,EAAD,CAAjB,CACC,CAHD,CAMA,mBACE,aAAK,SAAS,CAAC,2BAAf,wBACE,MAAC,MAAD,CAAQ,KAAR,EAAc,SAAS,CAAC,uBAAxB,wBACE,KAAC,MAAD,EAAQ,OAAO,CAAEJ,WAAjB,CAA6B,SAAS,sCAAgCF,cAAc,GAAK,YAAnB,CAAkC,UAAlC,CAA+C,EAA/E,CAAtC,wBADF,cAEE,KAAC,MAAD,EAAQ,OAAO,CAAEE,WAAjB,CAA8B,SAAS,sCAAgCF,cAAc,GAAK,UAAnB,CAAgC,UAAhC,CAA6C,EAA7E,CAAvC,sBAFF,GADF,cAKE,YAAK,SAAS,CAAC,kBAAf,UAEI;AACAA,cAAc,GAAK,YAAnB,CAAkCF,iBAAiB,CAACS,GAAlB,CAAsB,SAACC,EAAD,CAAQ,CAC9D,mBAAO,KAAC,IAAD,EAAe,EAAE,CAAEA,EAAnB,EAAWA,EAAX,CAAP,CACD,CAFiC,CAAlC,CAGAT,eAAe,CAACQ,GAAhB,CAAoB,SAACC,EAAD,CAAQ,CAC1B,mBAAO,KAAC,IAAD,EAAe,EAAE,CAAEA,EAAnB,EAAWA,EAAX,CAAP,CACD,CAFD,CANJ,EALF,GADF,CAmBD,CA5BD,CA8BA,QAASC,CAAAA,eAAT,OAAiD,IAArBC,CAAAA,UAAqB,OAArBA,UAAqB,CAATC,KAAS,OAATA,KAAS,CAC/C;AACA,GAAMC,CAAAA,aAAa,CAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAeJ,KAAf,EAAsBK,MAAtB,CAA6B,kDAAEC,GAAF,UAAOC,KAAP,gBAAkBA,CAAAA,KAAK,CAACC,UAAN,CAAiBC,QAAjB,CAA0BV,UAAU,CAACF,EAArC,CAAlB,EAA7B,CAAnB,CAAtB,CAEA,GAAMa,CAAAA,eAAe,CAAGR,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAeJ,KAAf,EAAsBK,MAAtB,CAA6B,kDAAEC,GAAF,UAAOC,KAAP,gBAAkB,CAACA,KAAK,CAACC,UAAN,CAAiBC,QAAjB,CAA0BV,UAAU,CAACF,EAArC,CAAnB,EAA7B,CAAnB,CAAxB,CAGA,MAAO,CACLE,UAAU,CAAVA,UADK,CAEL;AACAX,eAAe,CAAEc,MAAM,CAACS,IAAP,CAAYV,aAAZ,CAHZ,CAILd,iBAAiB,CAAEe,MAAM,CAACS,IAAP,CAAYD,eAAZ,CAJd,CAAP,CAMD,CAED,cAAe3B,CAAAA,OAAO,CAACe,eAAD,CAAP,CAAyBZ,SAAzB,CAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Button } from 'semantic-ui-react'\r\nimport Poll from './Poll'\r\n\r\nconst HomePanel = ({  unansweredPollIds, answeredPollIds  }) => {  \r\n  const [activeCategory, setActiveCategory] = useState('unanswered')\r\n\r\n  const handleClick = (e) => {\r\n\r\n  setActiveCategory(e.target.innerText.toLowerCase())\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='home-panel main-container'>\r\n      <Button.Group className='home-panel__btn-group'>\r\n        <Button onClick={handleClick}className={`home-panel__btn-group__btn ${activeCategory === 'unanswered' ? 'positive' : ''}`}>Unanswered</Button>\r\n        <Button onClick={handleClick} className={`home-panel__btn-group__btn ${activeCategory === 'answered' ? 'positive' : ''}`}>Answered</Button>\r\n      </Button.Group>\r\n      <div className='home-panel__list'>\r\n        {\r\n          // Render polls depending on whether they've been answered or not by the user and pass their ids\r\n          activeCategory === 'unanswered' ? unansweredPollIds.map((id) => {\r\n            return <Poll key={id} id={id}/>\r\n          }) :   \r\n          answeredPollIds.map((id) => {\r\n            return <Poll key={id} id={id}/>\r\n          })      \r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps ({ authedUser, polls }) {\r\n  // Filter polls by answered and unanswered by the authed user\r\n  const answeredPolls = Object.fromEntries(Object.entries(polls).filter(([key, value]) => value.answeredBy.includes(authedUser.id)))\r\n\r\n  const unansweredPolls = Object.fromEntries(Object.entries(polls).filter(([key, value]) => !value.answeredBy.includes(authedUser.id)))\r\n\r\n\r\n  return {\r\n    authedUser,\r\n    // Extract the ids of both types of polls to map over in the UI\r\n    answeredPollIds: Object.keys(answeredPolls),\r\n    unansweredPollIds: Object.keys(unansweredPolls)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(HomePanel)\r\n"]},"metadata":{},"sourceType":"module"}