{"ast":null,"code":"import { generateId } from '../utils/helpers';\nexport let users = {\n  'Mike': {\n    id: 'Mike',\n    avatar: 'https://randomuser.me/api/portraits/men/49.jpg',\n    createdPolls: ['55675685785678578'],\n    answeredPolls: []\n  },\n  'Carol': {\n    id: 'Carol',\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\n    createdPolls: [],\n    answeredPolls: []\n  },\n  'Jennifer': {\n    id: 'Jennifer',\n    avatar: 'https://randomuser.me/api/portraits/women/3.jpg',\n    createdPolls: [],\n    answeredPolls: ['76757564985876956']\n  },\n  'Victor': {\n    id: 'Victor',\n    avatar: 'https://randomuser.me/api/portraits/men/16.jpg',\n    createdPolls: [],\n    answeredPolls: []\n  }\n};\nlet polls = {\n  '\"28c2e604-390f-4582-98d7-88c402e6ff0b\"': {\n    id: '55675685785678578',\n    author: {\n      id: 'Mike',\n      avatar: 'https://randomuser.me/api/portraits/men/49.jpg'\n    },\n    firstQuestion: 'A powerful lion',\n    secondQuestion: 'A cute dog',\n    isAnswered: false,\n    firstQuestionReplies: 0,\n    secondQuestionReplies: 1,\n    totalReplies: 1\n  },\n  '76757564985876956': {\n    id: '76757564985876956',\n    author: {\n      id: 'Jennifer',\n      avatar: 'https://randomuser.me/api/portraits/women/3.jpg'\n    },\n    firstQuestion: 'A big tiger',\n    secondQuestion: 'A lazy cat',\n    isAnswered: true,\n    firstQuestionReplies: 1,\n    secondQuestionReplies: 0,\n    totalReplies: 1\n  }\n};\n\nfunction formatPoll({\n  firstQuestion,\n  secondQuestion,\n  author\n}) {\n  return {\n    author,\n    id: generateId(),\n    firstQuestion,\n    secondQuestion,\n    isAnswered: false,\n    firstQuestionReplies: 0,\n    secondQuestionReplies: 0,\n    totalReplies: 0\n  };\n}\n\nexport function _savePoll({\n  firstQuestion,\n  secondQuestion,\n  author\n}) {\n  return new Promise((res, rej) => {\n    const formattedPoll = formatPoll({\n      author,\n      firstQuestion,\n      secondQuestion\n    });\n    setTimeout(() => {\n      // polls = {\n      //   ...polls,\n      //   [formattedPoll.id]: formattedPoll,\n      // }\n      // users = {\n      //   ...users,\n      //   [author]: {\n      //     ...users[author],\n      //     polls: users[author].polls.concat([formattedPoll.id])\n      //   }\n      // }\n      res(formattedPoll);\n    }, 1000);\n  });\n}\nexport function _getUsers() {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({ ...users\n    }), 1000);\n  });\n}\nexport function _getPolls() {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({ ...polls\n    }), 1000);\n  });\n}","map":{"version":3,"sources":["C:/Users/Lenovo User/Desktop/Web Development Projects/2. React Developer Nanodegree/would-you-rather/src/utils/_DATA.js"],"names":["generateId","users","id","avatar","createdPolls","answeredPolls","polls","author","firstQuestion","secondQuestion","isAnswered","firstQuestionReplies","secondQuestionReplies","totalReplies","formatPoll","_savePoll","Promise","res","rej","formattedPoll","setTimeout","_getUsers","_getPolls"],"mappings":"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","sourcesContent":["import { generateId } from '../utils/helpers'\r\n\r\nexport let users = {\r\n  'Mike': {\r\n    id: 'Mike',\r\n    avatar: 'https://randomuser.me/api/portraits/men/49.jpg',\r\n    createdPolls: ['55675685785678578'],\r\n    answeredPolls: []\r\n  },\r\n  'Carol': {\r\n    id: 'Carol',\r\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\r\n    createdPolls: [],\r\n    answeredPolls: []\r\n  },\r\n  'Jennifer': {\r\n    id: 'Jennifer',\r\n    avatar: 'https://randomuser.me/api/portraits/women/3.jpg',\r\n    createdPolls: [],\r\n    answeredPolls: ['76757564985876956']\r\n  },\r\n  'Victor': {\r\n    id: 'Victor',\r\n    avatar: 'https://randomuser.me/api/portraits/men/16.jpg',\r\n    createdPolls: [],\r\n    answeredPolls: []\r\n  }\r\n}\r\n\r\nlet polls = {\r\n  '\"28c2e604-390f-4582-98d7-88c402e6ff0b\"': {\r\n    id: '55675685785678578',\r\n    author: {\r\n      id: 'Mike',\r\n      avatar: 'https://randomuser.me/api/portraits/men/49.jpg'    \r\n    },\r\n    firstQuestion: 'A powerful lion',\r\n    secondQuestion: 'A cute dog',\r\n    isAnswered: false,\r\n    firstQuestionReplies: 0,\r\n    secondQuestionReplies: 1,\r\n    totalReplies: 1\r\n  },\r\n  '76757564985876956': {\r\n    id: '76757564985876956',\r\n    author: {\r\n      id: 'Jennifer',\r\n      avatar: 'https://randomuser.me/api/portraits/women/3.jpg'    \r\n    },\r\n    firstQuestion: 'A big tiger',\r\n    secondQuestion: 'A lazy cat',\r\n    isAnswered: true,\r\n    firstQuestionReplies: 1,\r\n    secondQuestionReplies: 0,\r\n    totalReplies: 1\r\n  }\r\n}\r\n\r\nfunction formatPoll ({ firstQuestion, secondQuestion, author }) {\r\n  return {\r\n    author,\r\n    id: generateId(),\r\n    firstQuestion,\r\n    secondQuestion,\r\n    isAnswered: false,\r\n    firstQuestionReplies: 0,\r\n    secondQuestionReplies: 0,\r\n    totalReplies: 0\r\n  }\r\n}\r\n\r\nexport function _savePoll ({ firstQuestion, secondQuestion, author }) {\r\n  return new Promise((res, rej) => {\r\n    const formattedPoll = formatPoll({\r\n      author,\r\n      firstQuestion,\r\n      secondQuestion\r\n    })\r\n\r\n    setTimeout(() => {\r\n      // polls = {\r\n      //   ...polls,\r\n      //   [formattedPoll.id]: formattedPoll,\r\n      // }\r\n\r\n      // users = {\r\n      //   ...users,\r\n      //   [author]: {\r\n      //     ...users[author],\r\n      //     polls: users[author].polls.concat([formattedPoll.id])\r\n      //   }\r\n      // }\r\n\r\n      res(formattedPoll)\r\n    }, 1000)\r\n  })\r\n}\r\n\r\nexport function _getUsers () {\r\n  return new Promise((res, rej) => {\r\n    setTimeout(() => res({...users}), 1000)\r\n  })\r\n}\r\n\r\nexport function _getPolls () {\r\n  return new Promise((res, rej) => {\r\n    setTimeout(() => res({...polls}), 1000)\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}