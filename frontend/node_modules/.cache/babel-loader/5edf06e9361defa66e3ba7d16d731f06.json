{"ast":null,"code":"import { savePoll } from '../utils/api';\nimport { addNewPollToUser, addAnsweredPollToUser } from '../actions/users';\nimport axios from 'axios';\nexport const RECEIVE_POLLS = 'RECEIVE_POLLS';\nexport const ADD_POLL = 'ADD_POLL';\nexport const ANSWER_POLL = 'ANSWER_POLL';\nexport const SAVE_POLLS = 'SAVE_POLLS';\nexport const SAVE_USERS = 'SAVE_USERS';\nexport function receivePolls(polls) {\n  return {\n    type: RECEIVE_POLLS,\n    payload: {\n      polls\n    }\n  };\n}\n\nfunction addPoll(poll) {\n  return {\n    type: ADD_POLL,\n    payload: {\n      poll\n    }\n  };\n}\n\nfunction answerPoll(id, user, option) {\n  return {\n    type: ANSWER_POLL,\n    payload: {\n      id,\n      option\n    }\n  };\n}\n\nexport function handleAddPoll(firstQuestion, secondQuestion) {\n  return (dispatch, getState) => {\n    const {\n      authedUser\n    } = getState();\n    return savePoll({\n      author: authedUser,\n      firstQuestion,\n      secondQuestion\n    }).then(poll => {\n      dispatch(addPoll(poll));\n      dispatch(addNewPollToUser(poll.author, poll.id));\n      dispatch(savePolls());\n      dispatch(saveUsers());\n    });\n  };\n}\nexport function handleAnswerPoll(id, option) {\n  return (dispatch, getState) => {\n    const {\n      authedUser\n    } = getState();\n    dispatch(answerPoll(id, option));\n    dispatch(addAnsweredPollToUser(authedUser, id));\n    dispatch(savePolls());\n    dispatch(saveUsers());\n  };\n}\n\nconst savePolls = () => async (dispatch, getState) => {\n  const polls = getState().polls;\n  return await axios.post('http://localhost:5000/api/polls', polls).then(res => {\n    dispatch({\n      type: SAVE_POLLS,\n      payload: {\n        polls: res.data\n      }\n    });\n  });\n};\n\nconst saveUsers = () => async (dispatch, getState) => {\n  const users = getState().users;\n  return await axios.post('http://localhost:5000/api/users', users).then(res => {\n    dispatch({\n      type: SAVE_USERS,\n      payload: {\n        users: res.data\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Lenovo User/Desktop/Web Development Projects/2. React Developer Nanodegree/would-you-rather/frontend/src/actions/polls.js"],"names":["savePoll","addNewPollToUser","addAnsweredPollToUser","axios","RECEIVE_POLLS","ADD_POLL","ANSWER_POLL","SAVE_POLLS","SAVE_USERS","receivePolls","polls","type","payload","addPoll","poll","answerPoll","id","user","option","handleAddPoll","firstQuestion","secondQuestion","dispatch","getState","authedUser","author","then","savePolls","saveUsers","handleAnswerPoll","post","res","data","users"],"mappings":"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","sourcesContent":["\r\nimport { savePoll } from '../utils/api'\r\nimport { addNewPollToUser, addAnsweredPollToUser } from '../actions/users'\r\nimport axios from 'axios'\r\n\r\nexport const RECEIVE_POLLS = 'RECEIVE_POLLS'\r\nexport const ADD_POLL = 'ADD_POLL'\r\nexport const ANSWER_POLL = 'ANSWER_POLL'\r\nexport const SAVE_POLLS = 'SAVE_POLLS'\r\nexport const SAVE_USERS = 'SAVE_USERS'\r\n\r\nexport function receivePolls(polls) {\r\n  return {\r\n    type: RECEIVE_POLLS,\r\n    payload: {\r\n      polls\r\n    }\r\n  }\r\n}\r\n\r\nfunction addPoll(poll) {\r\n  return {\r\n    type:  ADD_POLL,\r\n    payload: {\r\n      poll\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction answerPoll(id, user, option) {\r\n  return {\r\n    type: ANSWER_POLL,\r\n    payload: {\r\n      id,\r\n      option\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport function handleAddPoll(firstQuestion, secondQuestion) {\r\n  return (dispatch, getState) => {\r\n    const { authedUser } = getState()\r\n\r\n    return savePoll({\r\n      author: authedUser,\r\n      firstQuestion,\r\n      secondQuestion\r\n    })\r\n    .then((poll) => {\r\n      dispatch(addPoll(poll))\r\n      dispatch(addNewPollToUser(poll.author, poll.id))\r\n      dispatch(savePolls())\r\n      dispatch(saveUsers())\r\n    })\r\n  }\r\n}\r\n\r\nexport function handleAnswerPoll(id, option) {\r\n  return (dispatch, getState) => {\r\n    const { authedUser } = getState()\r\n\r\n    dispatch(answerPoll(id, option))\r\n    dispatch(addAnsweredPollToUser(authedUser, id))\r\n    dispatch(savePolls())\r\n    dispatch(saveUsers())\r\n  }\r\n}\r\n\r\nconst savePolls = () => async (dispatch, getState) => {\r\n  const polls = getState().polls\r\n\r\n   return await axios.post('http://localhost:5000/api/polls', polls)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: SAVE_POLLS,\r\n        payload: {\r\n          polls: res.data\r\n        }\r\n      })\r\n    })\r\n}\r\n\r\nconst saveUsers = () => async (dispatch, getState) => {\r\n  const users = getState().users\r\n\r\n   return await axios.post('http://localhost:5000/api/users', users)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: SAVE_USERS,\r\n        payload: {\r\n          users: res.data\r\n        }\r\n      })\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}